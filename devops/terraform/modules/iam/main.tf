locals {
  application_use  = "nla"
  region           = "us-west-2"
  namespace        = "internal.aws"
  company_code     = "sdge"
  application_code = "dwcko"
  environment_code = "sbx"
  region_code      = "wus2"
  owner            = "IAC Team"
  tags = {
    tag-version         = "Holds the version of the tagging format."
    billing-guid        = "Internal order - from SAP"
    unit                = "Organizational unit"
    portfolio           = "Portfolio associated with the application"
    support-group       = "Distribution list in email format"
    environment         = "Environment deployed"
    cmdb-ci-id          = "CI ID as generated by ServiceNow CMDB"
    data-classification = "Data privacy classification"
  }
}
# transcribe_lambda_role
resource "aws_iam_role" "transcribe_lambda_role" {
  name = "transcribe_lambda_role"

  assume_role_policy = <<POLICY
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "lambda.amazonaws.com",
                    "apigateway.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "edgelambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "Service": "states.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
POLICY
}
resource "aws_iam_role_policy_attachment" "AmazonTranscribeFullAccess" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonTranscribeFullAccess"
  role       = aws_iam_role.transcribe_lambda_role.name
}

# comprehend_lambda_role
resource "aws_iam_role" "comprehend_lambda_role" {
  name = "comprehend_lambda_role"

  assume_role_policy = <<POLICY
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "lambda.amazonaws.com",
                    "apigateway.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "edgelambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "Service": "states.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
POLICY
}
resource "aws_iam_role_policy_attachment" "AmazonComprehendFullAccess" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonComprehendFullAccess"
  role       = aws_iam_role.comprehend_lambda_role.name
}

# informational_macie_lambda_role
resource "aws_iam_role" "informational_macie_lambda_role" {
  name = "informational_macie_lambda_role"

  assume_role_policy = <<POLICY
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "lambda.amazonaws.com",
                    "apigateway.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "edgelambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "Service": "states.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
POLICY
}
resource "aws_iam_role_policy_attachment" "InfoAmazonMacieFullAccess" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonMacieFullAccess"
  role       = aws_iam_role.informational_macie_lambda_role.name
}

# macie_lambda_role
resource "aws_iam_role" "macie_lambda_role" {
  name = "macie_lambda_role"

  assume_role_policy = <<POLICY
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "lambda.amazonaws.com",
                    "apigateway.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "edgelambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "Service": "states.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
POLICY
}
resource "aws_iam_role_policy_attachment" "AmazonMacieFullAccess" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonMacieFullAccess"
  role       = aws_iam_role.macie_lambda_role.name
}

resource "aws_iam_role" "athena_lambda_role" {
  name = "macie_lambda_role"

  assume_role_policy = <<POLICY
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Principal": {
                "Service": [
                    "lambda.amazonaws.com",
                    "apigateway.amazonaws.com"
                ]
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Effect": "Allow",
            "Principal": {
                "Service": "edgelambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        },
        {
            "Sid": "",
            "Effect": "Allow",
            "Principal": {
                "Service": "states.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
        }
    ]
}
POLICY
}

resource "aws_iam_role_policy_attachment" "AmazonAthenaFullAccess" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
  role       = aws_iam_role.athena_lambda_role.name
}


# unrefinedLambdaRole-arn
# initialLambdaRole-arn
# cleanLambdaRole-arn
# dirtyLambdaRole-arn
# verifiedCleanLambdaRole-arn
# piimetadata
# maciefindings
# athenaresults
# 