name: deploy-to-env

on:
  push:
    branches:
      - dev
      - qa
  workflow_dispatch:
     inputs:
      environment:
        description: Select the GitHub environment
        required: true
        type: choice
        options:
          - dev
          - qa
          - prd
      branch:
        description: Select branch
        required: true
        type: choice
        options:
          - dev
          - feature/demo
          - master   
jobs:
  set-environment:
    runs-on: sempra-ubuntu-x64
    outputs:
      environment: ${{ steps.setenv.outputs.environment }}
    steps:
      - name: Set environment variable
        id: setenv
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "environment=dev" >> $GITHUB_ENV
            echo "::set-output name=environment::dev"
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            echo "environment=qa" >> $GITHUB_ENV
            echo "::set-output name=environment::qa"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_ENV
            echo "::set-output name=environment::prod"
          fi

  Deploy_Lambda_Functions:
    name: deploy-to-${{ needs.set-environment.outputs.environment }}
    uses: ./.github/workflows/lambda-deploy.yml
    needs: [set-environment]
    with:
      Environment: ${{ needs.set-environment.outputs.environment }}
      awsRegionCode: 'us-west-2'
      awsRegionAbbreviation: 'wus2'
      s3ArtifactBucketSuffix: 's3-tf-artifacts-testingbucket'
      s3ArtifactBucketFolder: 'pipeline-artifact'
      s3LambdaObjectKey1: 'ccc_audit_call_lambda.zip'
      lambdaFunctionName1: 'lambda-audit-call'
      # s3LambdaObjectKey2: 'ccc_comprehend_lambda.zip'
      # lambdaFunctionName2: 'lambda-comprehend'
      # s3LambdaObjectKey3: 'ccc_informational_macie_lambda.zip'
      # lambdaFunctionName3: 'lambda-info-macie'
      # s3LambdaObjectKey4: 'ccc_macie_scan_trigger_lambda.zip'
      # lambdaFunctionName4: 'lambda-macie-scan'
      # s3LambdaObjectKey5: 'ccc_notification_forwarder_lambda.zip'
      # lambdaFunctionName5: 'lambda-notification'
      # s3LambdaObjectKey6: 'ccc_transcribe_lambda.zip'
      # lambdaFunctionName6: 'lambda-transcribe'
      # s3LambdaObjectKey7: 'ccc_audio_copy.zip'
      # lambdaFunctionName7: 'lambda-audio-copy'
      # s3LambdaObjectKey8: 'ccc_audio_access_logs_to_cw.zip'
      # lambdaFunctionName8: 'lambda-audio-access-logs-to-cw'
      # s3LambdaObjectKey9: 'ccc_access_denied_notification_lambda.zip'
      # lambdaFunctionName9: 'lambda-access-denied-notification'
      # s3LambdaObjectKey10: 'ccc_file_transfer_lambda.zip'
      # lambdaFunctionName10: 'lambda-file-transfer'
      # s3LambdaObjectKey11: 'key_rotation_alert_lambda.zip'
      # lambdaFunctionName11: 'lambda-key-rotation-alert'
      organization: 'sdge'
      applicationcode: 'dtdes'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCOUNT: ${{ secrets.AWS_ACCOUNT }}
